// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/midoblgsm/testMe/resources"
)

type FakeMyTestInterface struct {
	MyTestMethodStub        func(string) (string, error)
	myTestMethodMutex       sync.RWMutex
	myTestMethodArgsForCall []struct {
		arg1 string
	}
	myTestMethodReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMyTestInterface) MyTestMethod(arg1 string) (string, error) {
	fake.myTestMethodMutex.Lock()
	fake.myTestMethodArgsForCall = append(fake.myTestMethodArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("MyTestMethod", []interface{}{arg1})
	fake.myTestMethodMutex.Unlock()
	if fake.MyTestMethodStub != nil {
		return fake.MyTestMethodStub(arg1)
	} else {
		return fake.myTestMethodReturns.result1, fake.myTestMethodReturns.result2
	}
}

func (fake *FakeMyTestInterface) MyTestMethodCallCount() int {
	fake.myTestMethodMutex.RLock()
	defer fake.myTestMethodMutex.RUnlock()
	return len(fake.myTestMethodArgsForCall)
}

func (fake *FakeMyTestInterface) MyTestMethodArgsForCall(i int) string {
	fake.myTestMethodMutex.RLock()
	defer fake.myTestMethodMutex.RUnlock()
	return fake.myTestMethodArgsForCall[i].arg1
}

func (fake *FakeMyTestInterface) MyTestMethodReturns(result1 string, result2 error) {
	fake.MyTestMethodStub = nil
	fake.myTestMethodReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMyTestInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.myTestMethodMutex.RLock()
	defer fake.myTestMethodMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMyTestInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resources.MyTestInterface = new(FakeMyTestInterface)
